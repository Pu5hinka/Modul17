# Наивная сортировка
# Мы показываем наивную сортировку, чтобы вы узнали, как делать не нужно ни в коем случае!
# Её суть заключается в том, чтобы постоянно перемешивать массив, пока не получим подходящую
# последовательность… Это очень долго с точки зрения времени выполнения. И правда — для массива
# из n элементов нам нужно сделать n! (факториал) перестановок и проверить каждую из них.
# Помните, в начале модуля мы говорили про алгоритмы сложности O(n!)?
# Сейчас (в первый и в последний раз) мы с вами реализуем такой алгоритм.
import random  # модуль, с помощью которого перемешиваем массив

# пусть имеем массив всего лишь из 9 элементов
array = [2, 3, 1, 4, 6, 5, 9, 8, 7]

is_sort = False  # станет True, если отсортирован
count = 0  # счетчик количества перестановок

while not is_sort:  # пока не отсортирован
    count += 1  # прибавляем 1 к счётчику

    random.shuffle(array)  # перемешиваем массив

    # проверяем, отсортирован ли
    is_sort = True
    for i in range(len(array) - 1):
        if array[i] > array[i + 1]:
            is_sort = False
            break

print(array)
print(count)


#Сортировка выбором
array = [2, 3, 1, 4, 6, 5, 9, 8, 7]
count = 0

for i in range(len(array)):  # проходим по всему массиву
    idx_min = i  # сохраняем индекс предположительно минимального элемента
    for j in range(i, len(array)):
        count += 1
        if array[j] < array[idx_min]:
            idx_min = j
    if i != idx_min:  # если индекс не совпадает с минимальным, меняем
        array[i], array[idx_min] = array[idx_min], array[i]

print(array)
print(count)

#Задание 17.8.3.
#Модифицируйте описанный алгоритм для сортировки по убыванию.
for i in range(len(array)):
    idx_max = i
    for j in range(i, len(array)):
        if array[j] > array[idx_max]:
            idx_max = j
    if i != idx_max:
        array[i], array[idx_max] = array[idx_max], array[i]

#Сортировка пузырьком — самый любимый студентами вид сортировки.
# Его суть сводится к тому, что максимальные элементы шаг за шагом «всплывают» вправо —
# в отсортированную часть массива. И по ходу совершаются ещё перестановки, если это необходимо,
# ведь каждый раз мы сравниваем только соседние элементы!

array = [2, 3, 1, 4, 6, 5, 9, 8, 7]

for i in range(len(array)):
    for j in range(len(array) - i - 1):
        if array[j] > array[j + 1]:
            array[j], array[j + 1] = array[j + 1], array[j]

print(array)

#Сортировка вставками
# В начале итерации устанавливается ведущий элемент. На первой итерации — самый первый элемент,
# и по умолчанию он считается уже отсортированным.
# Сохраняем ведущий элемент в дополнительную переменную (красный квадрат в анимации).
# Далее происходит поиск места, куда должен встать ведущий элемент в уже отсортированной (левой) части
# массива. Можно, например, использовать цикл while с условием достижения границы и/или успешным
# нахождением элемента. Пока условие цикла выполняется, происходит сдвиг каждого элемента вправо.
# По завершении цикла сохранённое значение переменной помещается на освободившееся место.
# Алгоритм завершается.
array = [2, 3, 1, 4, 6, 5, 9, 8, 7]
count = 0
for i in range(1, len(array)):
    x = array[i]
    idx = i
    while idx > 0 and array[idx - 1] > x:
        count += 1
        array[idx] = array[idx - 1]
        idx -= 1
    array[idx] = x

print(count)

#Сортировка слиянием
def merge_sort(L):  # "разделяй"
    if len(L) < 2:  # если кусок массива равен 2,
        return L[:]  # выходим из рекурсии
    else:
        middle = len(L) // 2  # ищем середину
        left = merge_sort(L[:middle])  # рекурсивно делим левую часть
        right = merge_sort(L[middle:])  # и правую
        return merge(left, right)  # выполняем слияние


def merge(left, right):  # "властвуй"
    result = []  # результирующий массив
    i, j = 0, 0  # указатели на элементы

    # пока указатели не вышли за границы
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # добавляем хвосты
    while i < len(left):
        result.append(left[i])
        i += 1

    while j < len(right):
        result.append(right[j])
        j += 1

    return result


#Быстрая сортировка
# Выбирается ведущий элемент
# Две части массива сортируются только на основе этого ведущего элемента.
# Происходит последовательный обмен значениями элементов. Вопрос в том, какие элементы обменивать.
# Сначала происходит поиск слева направо до первого элемента, который превосходит по своему значению
# ведущий элемент. Затем массив просматривается справа налево в поисках элемента, который меньше ведущего.
# Когда такие элементы найдены, происходит их обмен.
# Таким образом, в левой части массива имеются элементы только меньше ведущего,
# а в правой — только больше.
# Функция рекурсивно применяется к получившимся частям массива, если их размеры превосходят один элемент.

def qsort(array, left, right):
    middle = (left + right) // 2

    p = array[middle]
    i, j = left, right
    while i <= j:
        while array[i] < p:
            i += 1
        while array[j] > p:
            j -= 1
        if i <= j:
            array[i], array[j] = array[j], array[i]
            i += 1
            j -= 1

    if j > left:
        qsort(array, left, j)
    if right > i:
        qsort(array, i, right)
# Модифицируйте алгоритм быстрой сортировки таким образом, чтобы ведущий элемент выбирался как
# случайный среди подмассива, который сортируется на данном этапе. Воспользуйтесь функцией из
# пакета random.

import random

# random.choice(array[idx_left: idx_right])
def qsort_random(array, left, right):
    p = random.choice(array[left:right + 1])
    i, j = left, right
    while i <= j:
        while array[i] < p:
            i += 1
        while array[j] > p:
            j -= 1
        if i <= j:
            count += 1
            array[i], array[j] = array[j], array[i]
            i += 1
            j -= 1

    if j > left:
        qsort_random(array, left, j)
    if right > i:
        qsort_random(array, i, right)
